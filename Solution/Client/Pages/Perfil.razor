@page "/perfil"
@using Shared.DataTransferObjects
@using Shared.Services
@inject IUsuariosService UsuariosService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider StateProvider

@if (showErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@error</p>
    </div>
}

<div class="card mb-3">
    <div class="card-body">
        <h3 class="card-title">Mi cuenta</h3>
        <EditForm Model="userModel" OnValidSubmit="UpdateUsuario">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="nombreCompleto">Nombre a mostrar</label>
                <InputText id="nombreCompleto" class="form-control" @bind-Value="userModel.FullName" />
                <ValidationMessage For="@(() => userModel.FullName)" />
            </div>
            <div class="form-group mb-3">
                <label for="email">Correo electrónico</label>
                <InputText id="email" class="form-control" @bind-Value="userModel.Email" />
                <ValidationMessage For="@(() => userModel.Email)" />
            </div>
            <div class="form-group mb-3">
                <label for="userName">Nombre de usuario</label>
                <InputText id="userName" class="form-control" @bind-Value="userModel.UserName" />
                <ValidationMessage For="@(() => userModel.UserName)" />
            </div>
            <div class="form-group mb-3">
                <label for="password">Contraseña</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
                <ValidationMessage For="@(() => userModel.Password)" />
            </div>
            <hr />
            <div class="d-flex justify-content-between">
                <span class="align-self-center"><button type="button" class="btn btn-link" @onclick="ClearUsuarioForm">Restablecer</button></span>
                <button type="submit" class="btn btn-outline-primary">Guardar cambios</button>
            </div>
        </EditForm>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h3 class="card-title">Actualiza tu contraseña</h3>
        <EditForm Model="passModel" OnValidSubmit="UpdatePassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="currentPassword">Contraseña actual</label>
                <InputText id="currentPassword" type="password" class="form-control" @bind-Value="passModel.CurrentPassword" />
                <ValidationMessage For="@(() => passModel.CurrentPassword)" />
            </div>
            <div class="form-group mb-3">
                <label for="newPassword">Nueva contraseña</label>
                <InputText id="newPassword" type="password" class="form-control" @bind-Value="passModel.NewPassword" />
                <ValidationMessage For="@(() => passModel.NewPassword)" />
            </div>
            <div class="form-group mb-3">
                <label for="confirmNewPassword">Confirmar nueva contraseña</label>
                <InputText id="confirmNewPassword" type="password" class="form-control" @bind-Value="passModel.ConfirmNewPassword" />
                <ValidationMessage For="@(() => passModel.ConfirmNewPassword)" />
            </div>
            <hr />
            <div class="d-flex justify-content-between">
                <span class="align-self-center"><button type="button" class="btn btn-link" @onclick="ClearPasswordForm">Cancelar</button></span>
                <button type="submit" class="btn btn-outline-primary">Listo</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private UserForUpdateDto userModel = new UserForUpdateDto();
    private PasswordForUpdateDto passModel = new PasswordForUpdateDto();
    private bool showErrors;
    private string error = "";

    private string idUsuario = "";

    protected override async Task OnInitializedAsync()
    {
        idUsuario = (await StateProvider.GetAuthenticationStateAsync()).User.FindFirst("Id")!.Value;

        userModel = await GetUsuario();
    }

    private async Task<UserForUpdateDto> GetUsuario()
    {
        var result = await UsuariosService.GetUsuario(idUsuario);

        return result.Element!;
    }

    private async Task UpdateUsuario()
    {
        showErrors = false;

        var result = await UsuariosService.UpdateUsuario(userModel, idUsuario);

        if (result.IsSuccessful)
        {
            userModel = result.Element!;
            return;
        }

        error = result.Error!;
        showErrors = true;
    }

    private async Task UpdatePassword()
    {
        showErrors = false;

        var result = await UsuariosService.UpdatePassword(passModel, idUsuario);

        if (result.IsSuccessful)
        {
            passModel = result.Element!;
            return;
        }

        error = result.Error!;
        showErrors = true;
    }

    private async Task ClearUsuarioForm()
    {
        userModel = await GetUsuario();
    }

    private void ClearPasswordForm()
    {
        passModel = new PasswordForUpdateDto();
    }
}

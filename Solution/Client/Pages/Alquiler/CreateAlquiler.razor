@page "/createalquiler/{id:int}"
@using Shared.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Shared.DataTransferObjects
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject IAlquilerService alquilerService
@inject IAlojamientoService alojamientoService

<div class="card mb-3">
    <div class="card-body">
        <h3 class="card-title">Crear Alquiler</h3>

        <hr />

        <EditForm Model="NewAlquilerModel" OnValidSubmit="CreateNewAlquiler">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputNumber @bind-Value="@NewAlquilerModel.IdAlojamiento" class="form-control" readonly hidden />
            <InputText @bind-Value="@NewAlquilerModel.IdInquilino" class="form-control" readonly hidden />

            <div class="form-group mb-3 row">
                <div class="col">
                    <label for="fechaInicio">Fecha de Inicio</label>
                    <InputDate @bind-Value="NewAlquilerModel.FechaInicio" class="form-control" id="fechaInicio" @oninput="OnFechaInicioChanged" />
                    <ValidationMessage For="@(() => NewAlquilerModel.FechaInicio)" />
                </div>

                <div class="col">
                    <label for="fechaFin">Fecha de Fin</label>
                    <InputDate @bind-Value="NewAlquilerModel.FechaFin" class="form-control" id="fechaFin" @oninput="OnFechaFinChanged" />
                    <ValidationMessage For="@(() => NewAlquilerModel.FechaFin)" />
                </div>
            </div>

            <div class="form-group mb-3">
                <label for="cantidadDias">Cantidad de Días</label>
                <input type="number" Value="@cantidadDias" class="form-control" id="cantidadDias" readonly />
            </div>

            <div class="form-group mb-3">
                <label for="precioTotal">Precio Total</label>
                <InputNumber @bind-Value="NewAlquilerModel.PrecioTotal" class="form-control" id="precioTotal" readonly />
            </div>

            <hr />

            <div class="d-flex justify-content-between">
                <button @onclick="GoBack" class="btn btn-secondary">Volver</button>
                <button type="submit" class="btn btn-primary">Guardar Alquiler</button>
            </div>

        </EditForm>
    </div>
</div>

@code {
    [Parameter] public int id { get; set; }

    private string idUsuario = "";

    private AlquilerDto NewAlquilerModel = new AlquilerDto();
    private int cantidadDias = 0;
    private double precioNoche = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await StateProvider.GetAuthenticationStateAsync();
        idUsuario = authState.User.FindFirst("Id")!.Value;
        NewAlquilerModel.IdAlojamiento = id;
        NewAlquilerModel.IdInquilino = idUsuario;

        var alojamiento = await alojamientoService.GetAlojamiento(id);
        precioNoche = alojamiento.PrecioNoche;

        NewAlquilerModel.FechaInicio = DateTime.Today;
        NewAlquilerModel.FechaFin = DateTime.Today.AddDays(1);
        CalculatePrice();
    }

    private void OnFechaInicioChanged(ChangeEventArgs e)
    {
        NewAlquilerModel.FechaInicio = DateTime.Parse(e.Value.ToString());
        CalculatePrice();
    }

    private void OnFechaFinChanged(ChangeEventArgs e)
    {
        NewAlquilerModel.FechaFin = DateTime.Parse(e.Value.ToString());
        CalculatePrice();
    }

    private void CalculatePrice()
    {
        if (NewAlquilerModel.FechaInicio < DateTime.Today || NewAlquilerModel.FechaFin < DateTime.Today)
        {
            NewAlquilerModel.PrecioTotal = 0;
            cantidadDias = 0;
            return;
        }

        if (NewAlquilerModel.FechaInicio != default && NewAlquilerModel.FechaFin != default && NewAlquilerModel.FechaInicio <= NewAlquilerModel.FechaFin)
        {
            cantidadDias = (NewAlquilerModel.FechaFin - NewAlquilerModel.FechaInicio).Days;
            NewAlquilerModel.PrecioTotal = cantidadDias * precioNoche;
        }
        else
        {
            NewAlquilerModel.PrecioTotal = 0;
            cantidadDias = 0;
        }
    }

    private async Task CreateNewAlquiler()
    {
        var createdAlquiler = await alquilerService.CreateAlquiler(NewAlquilerModel);

        if (createdAlquiler != null)
        {
            navigationManager.NavigateTo("/listalojamientos");
        }
    }

    private void GoBack()
    {
        navigationManager.NavigateTo("/listalojamientos");
    }

}

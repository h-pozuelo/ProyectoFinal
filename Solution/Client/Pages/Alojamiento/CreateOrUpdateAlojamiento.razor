@page "/CreateOrUpdateAlojamiento/{id:int?}"
@using Client.Services
@using Shared.DataTransferObjects
@using Shared.Services
@using Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IAlojamientoService alojamientoService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject IUbicacionesService UbicacionesService
@inject ImagesService ImagesService



<div class="card">
    <div class="card-body">
        <h3>@(IsEdit ? "Actualizar Alojamiento" : "Crear Alojamiento")</h3>
        <EditForm Model="CreateUpdateModel" OnValidSubmit="CreateOrUpdate">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputNumber id="Id" @bind-Value="CreateUpdateModel.Id" hidden />
            <InputText id="IdPropietario" @bind-Value="CreateUpdateModel.IdPropietario" readonly />

            @if (IsEdit && !(imagenesList == null || imagenesList.Count() == 0))
            {
                @foreach (var imagen in imagenesList)
                {
                    <img src="@imagen" />
                }
            }

            <div class="form-group mb-3">
                <label for="imagenesUpload">Fotos</label>
                <InputFile id="imagenesUpload" class="form-control" OnChange="OnImagenesSelected" multiple />
            </div>

            <div class="form-group mb-3">
                <label for="Titulo">Titulo</label>
                <InputText id="Titulo" class="form-control" @bind-Value="CreateUpdateModel.Titulo" />
                <ValidationMessage For="@(() => CreateUpdateModel.Titulo)" />
            </div>

            <div class="form-group mb-3">
                <label for="Direccion">Dirección</label>
                <InputText id="Direccion" class="form-control" @bind-Value="CreateUpdateModel.Direccion" />
                <ValidationMessage For="@(() => CreateUpdateModel.Direccion)" />
            </div>

            <div class="form-group mb-3">
                <label for="NumeroHabitaciones">Numero de Habitaciones</label>
                <InputNumber id="NumeroHabitaciones" class="form-control" @bind-Value="CreateUpdateModel.NumeroHabitaciones" />
                <ValidationMessage For="@(() => CreateUpdateModel.NumeroHabitaciones)" />
            </div>

            <div class="form-group mb-3">
                <label for="CapacidadInvitados">Capacidad de Invitados</label>
                <InputNumber id="CapacidadInvitados" class="form-control" @bind-Value="CreateUpdateModel.CapacidadInvitados" />
                <ValidationMessage For="@(() => CreateUpdateModel.CapacidadInvitados)" />
            </div>

            <div class="form-group mb-3">
                <label for="PrecioNoche">Precio por Noche</label>
                <InputNumber id="PrecioNoche" class="form-control" @bind-Value="CreateUpdateModel.PrecioNoche" />
                <ValidationMessage For="@(() => CreateUpdateModel.PrecioNoche)" />
            </div>

            <div class="form-group mb-3">
                <label for="nombreComunidad">Comunidad</label>
                <InputSelect id="nombreComunidad" class="form-select"
                             TValue="string"
                             Value="CreateUpdateModel.NombreComunidad"
                             ValueChanged="OnSelectedComunidadChanged"
                             ValueExpression="(() => CreateUpdateModel.NombreComunidad)">
                    <option value="">-- selecciona una comunidad --</option>
                    @foreach (var comunidad in comunidadesList)
                    {
                        <option value="@comunidad.Nombre">@comunidad.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CreateUpdateModel.NombreComunidad)" />
            </div>

            <div class="form-group mb-3">
                <label for="nombreProvincia">Provincia</label>
                <InputSelect id="nombreProvincia" class="form-select"
                             TValue="string"
                             Value="CreateUpdateModel.NombreProvincia"
                             ValueChanged="OnSelectedProvinciaChanged"
                             ValueExpression="(() => CreateUpdateModel.NombreProvincia)">
                    <option value="">-- selecciona una provincia --</option>
                    @foreach (var provincia in provinciasList)
                    {
                        <option value="@provincia.Nombre">@provincia.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CreateUpdateModel.NombreProvincia)" />
            </div>

            <div class="form-group mb-3">
                <label for="nombreCiudad">Ciudad</label>
                <InputSelect id="nombreCiudad" class="form-select"
                             @bind-Value="CreateUpdateModel.NombreCiudad">
                    <option value="">-- selecciona una ciudad --</option>
                    @foreach (var ciudad in ciudadesList)
                    {
                        <option value="@ciudad.Nombre">@ciudad.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CreateUpdateModel.NombreCiudad)" />
            </div>

            @* La fecha de publicación es inicializada en el Back, así que no es necesario añadir un control de fecha para ello *@
            @* <div class="form-group mb-3">
            <label for="FechaPublicacion">Fecha de Publicacion</label>
            <InputDate id="FechaPublicacion" class="form-control" @bind-Value="CreateUpdateModel.FechaPublicacion" />
            <ValidationMessage For="@(() => CreateUpdateModel.FechaPublicacion)" />
            </div> *@

            <div class="form-group mb-3">
                <label for="Descripcion">Descripcion</label>
                <InputText id="Descripcion" class="form-control" @bind-Value="CreateUpdateModel.Descripcion" />
                <ValidationMessage For="@(() => CreateUpdateModel.Descripcion)" />
            </div>


            <hr />

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-outline-primary">Guardar</button>
            </div>

        </EditForm>
    </div>

</div>




@code {
    private AlojamientoDto CreateUpdateModel = new AlojamientoDto();
    [Parameter] public int id { get; set; }
    private bool IsEdit => id != 0;
    private string idUsuario = "";

    private IEnumerable<Comunidad> comunidadesList = new List<Comunidad>();

    private IEnumerable<Provincia> provinciasList = new List<Provincia>();

    private IEnumerable<Ciudad> ciudadesList = new List<Ciudad>();

    private IEnumerable<string>? imagenesList;

    protected override async Task OnInitializedAsync()
    {
        await GetComunidades();

        if (IsEdit)
        {
            CreateUpdateModel = await alojamientoService.GetAlojamiento(id);

            var idComunidad = comunidadesList
                .FirstOrDefault(c => c.Nombre == CreateUpdateModel.NombreComunidad)!.Id;
            await GetProvinciasComunidad(idComunidad!);

            var idProvincia = provinciasList
                .FirstOrDefault(p => p.Nombre == CreateUpdateModel.NombreProvincia)!.Id;
            await GetCiudadesProvincia(idProvincia!);

            imagenesList = (await ImagesService.GetImages(containerName: "containerfinalproject", id: CreateUpdateModel.Id.ToString())).Element;

        }
        else
        {
            idUsuario = (await StateProvider.GetAuthenticationStateAsync()).User.FindFirst("Id")!.Value;
            CreateUpdateModel.IdPropietario = idUsuario;

        }
    }

    private async Task CreateOrUpdate()
    {
        AlojamientoDto? result;

        if (IsEdit)
        {
            // Llamar al servicio para actualizar el alojamiento
            result = await alojamientoService.UpdateAlojamiento(CreateUpdateModel);
        }
        else
        {
            // Llamar al servicio para crear un nuevo alojamiento
            result = await alojamientoService.CreateAlojamiento(CreateUpdateModel);
        }

        if (imagenes.Any())
        {
            foreach (var imagen in imagenes)
            {
                await ImagesService.UploadImage(
                    image: imagen,
                    containerName: "containerfinalproject",
                    id: result.Id.ToString());
            }
        }

        // Redirigir a otra página o mostrar un mensaje de éxito
        navigationManager.NavigateTo("/alojamientos");
    }


    private List<IBrowserFile> imagenes = new List<IBrowserFile>();

    private void OnImagenesSelected(InputFileChangeEventArgs e)
    {
        imagenes = e.GetMultipleFiles().ToList();
    }

    private async Task OnSelectedComunidadChanged(string nombreComunidad)
    {
        CreateUpdateModel.NombreComunidad = nombreComunidad;

        CreateUpdateModel.NombreProvincia = null;
        CreateUpdateModel.NombreCiudad = null;

        var idComunidad = comunidadesList.FirstOrDefault(c => c.Nombre == nombreComunidad)!.Id;

        await GetProvinciasComunidad(idComunidad!);
    }

    private async Task OnSelectedProvinciaChanged(string nombreProvincia)
    {
        CreateUpdateModel.NombreProvincia = nombreProvincia;

        CreateUpdateModel.NombreCiudad = null;

        var idProvincia = provinciasList.FirstOrDefault(p => p.Nombre == nombreProvincia)!.Id;

        await GetCiudadesProvincia(idProvincia!);
    }

    private async Task GetComunidades()
    {
        var result = await UbicacionesService.GetComunidades();

        comunidadesList = result.Element!;
    }

    private async Task GetProvinciasComunidad(string idComunidad)
    {
        var result = await UbicacionesService.GetProvinciasComunidad(idComunidad);

        provinciasList = result.Element!;
    }

    private async Task GetCiudadesProvincia(string idProvincia)
    {
        var result = await UbicacionesService.GetCiudadesProvincia(idProvincia);

        ciudadesList = result.Element!;
    }
}
